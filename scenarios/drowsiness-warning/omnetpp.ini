[General]
network = artery.envmod.World
sim-time-limit = 1000s
*.traci.mapper.vehicleType = "artery.envmod.Car"
*.traci.core.version = -1
*.traci.launcher.typename = "PosixLauncher"
*.traci.launcher.sumocfg = "highway.sumocfg"
*.node[*].middleware.updateInterval = 0.1s
*.node[*].middleware.datetime = "2024-09-01 12:00:00"
*.node[*].middleware.services = xmldoc("services.xml")

*.node[*].middleware.enableEnvironmentModel = true

*.node[*].environmentModel.sensors = xmldoc("sensors.xml")

*.node[*].environmentModel.FrontRadar.fovRange = 200.0 m
*.node[*].environmentModel.FrontRadar.fovAngle = 60.0

*.node[*].nic.mac1609_4.txPower = 126mW
*.node[*].nic.phy80211p.sensitivity = -89dBm

*.node[*].middleware.DrowsinessDetectionService.warningThreshold = 0.6
*.node[*].middleware.DrowsinessDetectionService.criticalThreshold = 0.8
*.node[*].middleware.CaService.generation_interval = 1s
*.node[*].middleware.CaService.min_interval = 0.5s
**.CaService.cmdenv-log-level = info
*.node[*].middleware.CaService.max_interval = 1.5s

*.node[*].middleware.CaService.withDccRestriction = false
*.node[*].middleware.CaService.fixedRate = true
*.node[*].middleware.CaService.minInterval = 0.2 s

*.staticNodes.nodes = xmldoc("RSUs.xml")

*.rsu*.wlan[*].radio.transmitter.power = 100mW
*.rsu*.middleware.datetime = "2024-09-01 12:00:00"
*.rsu*.middleware.services = xmldoc("rsuservices.xml")

*.rsu*.wlan[*].radio.antennaType = "ConstantGainAntenna"
*.rsu*.wlan[*].radio.antenna.gain = 0dB

# Configuration pour la sortie CSV
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec
output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
.vector-recording = true
.scalar-recording = true

# Configuration spécifique pour les résultats en CSV
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

[Config sumo-gui]
*.traci.launcher.sumo = "sumo-gui"
# Visualization settings
*.visualizer.obstacleLossVisualizer.displayIntersections = true
*.visualizer.obstacleLossVisualizer.displayFaceNormalVectors = true
*.visualizer.obstacleLossVisualizer.intersectionLineColor = "yellow"
*.visualizer.obstacleLossVisualizer.faceNormalLineColor = "red"